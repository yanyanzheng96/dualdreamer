
[34m[1mwandb[39m[22m: [33mWARNING[39m Saving files without folders. If you want to preserve subdirectories pass base_path to wandb.save, i.e. wandb.save("/mnt/folder/file.h5", base_path="/mnt")
Number of points at loading :  1407
Number of points at loading :  1407
Number of points at loading :  1407
Number of points at loading :  1407
Seed: 888
[INFO] loading SD...
Loading pipeline components...: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 6/6 [00:00<00:00,  8.11it/s]
  0%|                                                                                                         | 0/2000 [00:00<?, ?it/s]/home/zy3724/miniconda3/envs/dreamgaussian4d/lib/python3.8/site-packages/torchvision/transforms/functional.py:96: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  img = torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))
[INFO] loaded SD!
Batch sample: 0
0 1
1 21
2 41
3 61
4 81
5 101
6 121
7 141
8 161
9 181
10 201
11 221
12 241
13 261
14 281
tensor(301, device='cuda:0')
tensor(281, device='cuda:0')
tensor(261, device='cuda:0')
tensor(241, device='cuda:0')
tensor(221, device='cuda:0')
tensor(201, device='cuda:0')
tensor(181, device='cuda:0')
tensor(161, device='cuda:0')
tensor(141, device='cuda:0')
tensor(121, device='cuda:0')
tensor(101, device='cuda:0')
tensor(81, device='cuda:0')
tensor(61, device='cuda:0')
tensor(41, device='cuda:0')
tensor(21, device='cuda:0')
Batch sample: 1
0 1
1 21
2 41
3 61
4 81
5 101
6 121
7 141
8 161
9 181
10 201
11 221
12 241
13 261
14 281
tensor(301, device='cuda:0')
tensor(281, device='cuda:0')
tensor(261, device='cuda:0')
tensor(241, device='cuda:0')
tensor(221, device='cuda:0')
tensor(201, device='cuda:0')
tensor(181, device='cuda:0')
tensor(161, device='cuda:0')
tensor(141, device='cuda:0')
tensor(121, device='cuda:0')
tensor(101, device='cuda:0')
tensor(81, device='cuda:0')
tensor(61, device='cuda:0')
tensor(41, device='cuda:0')
tensor(21, device='cuda:0')
Batch sample: 2
0 1
1 21
2 41
3 61
4 81
5 101
6 121
7 141
8 161
9 181
10 201
11 221
12 241
13 261
14 281
tensor(301, device='cuda:0')
tensor(281, device='cuda:0')
tensor(261, device='cuda:0')
tensor(241, device='cuda:0')
tensor(221, device='cuda:0')
tensor(201, device='cuda:0')
tensor(181, device='cuda:0')
tensor(161, device='cuda:0')
tensor(141, device='cuda:0')
tensor(121, device='cuda:0')
tensor(101, device='cuda:0')
tensor(81, device='cuda:0')
tensor(61, device='cuda:0')
tensor(41, device='cuda:0')
tensor(21, device='cuda:0')
Batch sample: 3
0 1
1 21
2 41
3 61
4 81
5 101
6 121
7 141
8 161
9 181
10 201
11 221
12 241
13 261
14 281
tensor(301, device='cuda:0')
tensor(281, device='cuda:0')
tensor(261, device='cuda:0')
tensor(241, device='cuda:0')
tensor(221, device='cuda:0')
tensor(201, device='cuda:0')
tensor(181, device='cuda:0')
tensor(161, device='cuda:0')
tensor(141, device='cuda:0')
tensor(121, device='cuda:0')
tensor(101, device='cuda:0')
tensor(81, device='cuda:0')
tensor(61, device='cuda:0')
tensor(41, device='cuda:0')
tensor(21, device='cuda:0')
Batch sample: 4
Batch sample: 5
Batch sample: 6
Batch sample: 7
Batch sample: 8
Batch sample: 9
Batch sample: 10
Batch sample: 11
Batch sample: 12
Batch sample: 13
Batch sample: 14
Batch sample: 15
Batch sample: 16
Batch sample: 17
Batch sample: 18
Batch sample: 19
Batch sample: 20
Batch sample: 21
Batch sample: 22
Batch sample: 23
0
uploading ply
1
Number of points at initialisation :  1407
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
uploading ply
201
202
203
204
205
206
207
208
  0%|                                                                                                         | 0/2000 [00:41<?, ?it/s]
Traceback (most recent call last):
  File "workflow_step3_datadir.py", line 1221, in <module>
    gui.train(opt.iters)
  File "workflow_step3_datadir.py", line 1062, in train
    self.train_step(i)
  File "workflow_step3_datadir.py", line 728, in train_step
    out = self.renderer.render(cur_cam, bg_color=bg_color)
  File "/home/zy3724/4Dprojects/harmonydreamer/gs_renderer.py", line 162, in render
    rotations = self.gaussians.get_rotation
  File "/home/zy3724/4Dprojects/harmonydreamer/gaussian_model.py", line 118, in get_rotation
    return self.rotation_activation(self._rotation)
  File "/home/zy3724/miniconda3/envs/dreamgaussian4d/lib/python3.8/site-packages/torch/nn/functional.py", line 4660, in normalize
    denom = input.norm(p, dim, keepdim=True).clamp_min(eps).expand_as(input)
KeyboardInterrupt
209
210
211
212
213
214
215
216